1 Create 3 tables following the criteria in the summary.
A.CREATE TABLE Users(
id SERIAL PRIMARY KEY,
 name VARCHAR (50),
  email VARCHAR (70) 
);

B.CREATE TABLE products (
id SERIAL PRIMARY KEY,
name VARCHAR (50),
price FLOAT   

);

C.CREATE TABLE orders (
id SERIAL PRIMARY KEY,
 product_id INT REFERENCES product(id)
);

2. Add some data to fill up each table.
  * At least 3 users, 3 products, 3 orders.
INSERT INTO users(name, email)
VALUES 
('Frank Acosta', 'Frank.Acosta@cl.com'),
('Jasmine Lemon', 'Jasmine.Lemon@cl.com'),
('Mercedes Johnson','Mercedes.Johnson@cl.com'); 

INSERT INTO product (name, price)
VALUES 
('Luxury watch', 35000),
('Luxury car', 80000),
('Luxury house',2000000); 

INSERT INTO orders (product_id)
VALUES 
(1),
(2),
(3); 


3. Run queries against your data.
  * Get all products for the first order.
-SELECT * FROM product AS p
JOIN orders AS o
ON p.id = o.product_id 
WHERE o.id = 1;
  
  
  * Get all orders.
-SELECT * FROM product AS p
JOIN orders AS o
ON p.id = o.product_id 
  
  
  
  * Get the total cost of an order ( sum the price of all products on an order ).
-SELECT sum(p.price) FROM orders AS o 
JOIN product AS p 
ON o.product_id = p.id;



4. Add a foreign key reference from orders to users.
-ALTER TABLE orders
ADD column user_id INT 
REFERENCES users(id)


5. Update the orders table to link a user to each order.
-UPDATE orders 
SET user_id = 1
WHERE orders.id = 1

UPDATE orders 
SET user_id = 2
WHERE orders.id = 2

UPDATE orders 
SET user_id = 3
WHERE orders.id = 3



6.Run queries against your data.
  * Get all orders for a user.
-SELECT * FROM users AS u
JOIN orders AS o
ON u.id = o.user_id 

* Get how many orders each user has.

SELECT u.name, COUNT(o.id)
FROM orders as o 
JOIN users as u
ON u.id = o.user_id 
GROUP BY u.name
